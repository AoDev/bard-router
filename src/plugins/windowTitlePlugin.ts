import Router from '../Router'

interface ITitleOptions {
  /** Easily prefix any title generated by a route config. */
  prefix?: string
  /** Title used by default when there isn't a specific route one. */
  defaultTitle?: string
  /** Add a suffix */
  suffix?: string
}

function setWindowTitleFromRouter(
  router: Router,
  window: {document: {title: string}},
  options: ITitleOptions
) {
  const titleConfig = router.currentRouteConfig?.windowTitlePlugin
  window.document.title = titleConfig
    ? (options.prefix ? options.prefix : '') +
      (typeof titleConfig === 'function' ? titleConfig(router) : titleConfig)
    : options.defaultTitle || ''
}

/**
 * Register the plugin with a router instance.
 *
 * How to use:
 * - Add a windowTitlePlugin.title field to any route config.
 * - title can be either a string or a function.
 * - if it's a function, it will be called with the router as argument.
 *
 * Example
 * ```
 * // myroutes.js
 * {
 *   '/some-page': {
 *     windowTitlePlugin: 'Some page'
 *   },
 *   '/some-other-page': {
 *     windowTitlePlugin: (router) => `Some other page - ${router.params.someValue}`
 *   }
 * }
 * ```
 */
function register(
  router: Router,
  window: {document: {title: string}},
  options: ITitleOptions = {}
) {
  const afterNavHandler = setWindowTitleFromRouter.bind(null, router, window, options)
  router.on('afterNav', afterNavHandler)
  return () => router.off('afterNav', afterNavHandler)
}

export default {
  register,
}
